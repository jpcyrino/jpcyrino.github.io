geom_line(aes(y=g),color="red") +
geom_ribbon(aes(xmin=2,xmax=4,ymin=f,ymax=g),alpha=.5) +
geom_text(aes(x=3,y=3,label="log[1.5]*x"),parse=T) +
geom_text(aes(x=3,y=1,label=".2*x^2"),parse=T) +
xlim(2,4) +
ylim(0,5) +
labs(x="x",y="y",title="Área entre funções no intervalo x=[2,4]")
ggplot(dat, aes(x=x,y=g)) +
geom_line(aes(y=f),color="blue") +
geom_line(aes(y=g),color="red") +
geom_ribbon(aes(xmin=2,xmax=4,ymin=f,ymax=g),alpha=.5) +
geom_text(aes(x=3,y=3,label="g(x)")) +
geom_text(aes(x=3,y=1,label="f(x)")) +
xlim(2,4) +
ylim(0,5) +
labs(x="x",y="y",title="Área entre funções no intervalo x=[2,4]")
ggplot(dat, aes(x=g,y=x)) +
geom_line(aes(x=f),color="blue") +
geom_line(aes(x=g),color="red") +
geom_ribbon(aes(xmin=f,xmax=g),alpha=.5) +
geom_text(aes(x=3,y=3,label="g(x)")) +
geom_text(aes(x=3,y=1,label="f(x)")) +
xlim(2,4) +
ylim(0,5) +
labs(x="x",y="y",title="Área entre funções no intervalo x=[2,4]")
ggplot(dat, aes(x=g,y=x)) +
geom_line(aes(x=f),color="blue") +
geom_line(aes(x=g),color="red") +
geom_ribbon(aes(ymin=f,ymax=g),alpha=.5) +
geom_text(aes(x=3,y=3,label="g(x)")) +
geom_text(aes(x=3,y=1,label="f(x)")) +
xlim(2,4) +
ylim(0,5) +
labs(x="x",y="y",title="Área entre funções no intervalo x=[2,4]")
dat <- data.frame(x=seq(0,5,length.out=101))
dat$h <- sapply(dat$x, FUN=function(x){.2*x**2})
dat$g <- sapply(dat$x, FUN=function(x){log(x,base=1.5)})
ggplot(dat, aes(x=x,y=g)) +
geom_line(aes(y=h),color="blue") +
geom_line(aes(y=g),color="red") +
geom_ribbon(aes(xmin=2,xmax=4,ymin=h,ymax=g),alpha=.5) +
geom_text(aes(x=3,y=3,label="g(x)")) +
geom_text(aes(x=3,y=1,label="h(x)")) +
xlim(2,4) +
ylim(0,5) +
labs(x="x",y="y",title="Área entre funções no intervalo x=[2,4]")
v <- c(30)
dvs <- c(0)
for (t in 1:20) {
dv <- 9.8 - 0.196*v[i]
v <- c(v,v+dv)
dvs <- c(dvs,dv)
}
v <- c(30)
dvs <- c(0)
for (t in 1:20) {
dv <- 9.8 - 0.196*v[t]
v <- c(v,v+dv)
dvs <- c(dvs,dv)
}
v <- c(30)
dvs <- c(0)
for (t in seq(1,20)) {
dv <- 9.8 - 0.196*v[t]
v <- c(v,v+dv)
dvs <- c(dvs,dv)
}
v
k[1] <- 1
v <- c(30)
dvs <- c(0)
for (t in seq(1,21)) {
dv <- 9.8 - 0.196*v[t]
v[t+1] <- v+dv
dvs[t+1] <- dv
}
v <- c(30)
dvs <- c(0)
for (t in seq(1,21)) {
dv <- 9.8 - 0.196*v[t]
v[t+1] <- v[t]+dv
dvs[t+1] <- dv
}
v
v <- c(30)
dvs <- c(0)
for (t in seq(1,31)) {
dv <- 9.8 - 0.196*v[t]
v[t+1] <- v[t]+dv
dvs[t+1] <- dv
}
v
v <- c(30)
dvs <- c(0)
for (t in seq(1,101)) {
dv <- 9.8 - 0.196*v[t]
v[t+1] <- v[t]+dv
dvs[t+1] <- dv
}
v
length(v)
v <- c(30)
dvs <- c(0)
for (t in seq(1,49)) {
dv <- 9.8 - 0.196*v[t]
v[t+1] <- v[t]+dv
dvs[t+1] <- dv
}
length(v)
v
plot(c(1:50),v)
dvs
length(c(1:50))
ggplot(data.frame(t = c(1:50), v, dvs), aes(x=t, y=v)) +
geom_line()
ggplot(data.frame(t = c(1:50), v, dvs), aes(x=t, y=dvs)) +
geom_line()
seq
seq(1,49,by=.5)
# primeira velocidade
v <- c(30)
# primeira aceleração
dvs <- c(0)
# atualização da aceleração de acordo com o tempo
# v = vetor de velocidades
# dvs = vetor de acelerações
for (t in seq(1,49,by=.5)) {
dv <- 9.8 - 0.196*v[t]
v[t+1] <- v[t]+dv
dvs[t+1] <- dv
}
v
a <- seq(0,50, by=10)
a
dv <- 9.8 - 0.196*a
dv
t <- seq(0,20)
expand.grid(t,v)
expand.grid(t,a)
tab <- expand.grid(t,a)
colnames(tab) <- c(t,v)
colnames(tab) <- c('t','v')
tab$d <- sapply(tab$v, FUN=function(x){9.8-0.196x})
tab$d <- sapply(tab$v, FUN=function(x){9.8-0.196*x})
View(tab)
ggplot(tab,aes(x=t,y=v)) +
geom_segment(aes(xend=x+.5,yend=y+d))
ggplot(tab,aes(x=t,y=v)) +
geom_segment(aes(xend=t+.5,yend=v+d))
geom_segment(aes(xend=t+.5,yend=v+d),arrow=arrow())
ggplot(tab,aes(x=t,y=v)) +
geom_segment(aes(xend=t+.5,yend=v+d),arrow=arrow())
# Primeiro vamos criar uma lista de velocidades e outra de tempos:
v <- seq(-10,50,by=10)
t <- seq(1,50)
# Agora vamos criar uma tabela que combine os tempos e as velocidades:
tab <- expand.grid(t,v)
colnames(tab) <- c(t,v)
# Aplicamos v à equação, criando a coluna d da tabela:
tab$d <- sapply(tab$v, FUN= function(x){9.8 - 0.196*x})
# Agora plotamos o gráfico:
ggplot(tab, aes(x=t,y=v)) +
geom_segment(aes(xend=t+.5,yend=v+d))
# Primeiro vamos criar uma lista de velocidades e outra de tempos:
v <- seq(-10,50,by=10)
t <- seq(1,50)
# Agora vamos criar uma tabela que combine os tempos e as velocidades:
tab <- expand.grid(t,v)
colnames(tab) <- c('t','v')
# Aplicamos v à equação, criando a coluna d da tabela:
tab$d <- sapply(tab$v, FUN= function(x){9.8 - 0.196*x})
# Agora plotamos o gráfico:
ggplot(tab, aes(x=t,y=v)) +
geom_segment(aes(xend=t+.5,yend=v+d))
v <- seq(-10,50,by=10)
t <- seq(1,50)
# Agora vamos criar uma tabela que combine os tempos e as velocidades:
tab <- expand.grid(t,v)
colnames(tab) <- c('t','v')
# Aplicamos v à equação, criando a coluna d da tabela:
tab$d <- sapply(tab$v, FUN= function(x){9.8 - 0.196*x})
# Agora plotamos o gráfico:
ggplot(tab, aes(x=t,y=v)) +
geom_vector(aes(xend=t+.5,yend=v+d))
# Primeiro vamos criar uma lista de velocidades e outra de tempos:
v <- seq(-10,50,by=10)
t <- seq(1,50)
# Agora vamos criar uma tabela que combine os tempos e as velocidades:
tab <- expand.grid(t,v)
colnames(tab) <- c('t','v')
# Aplicamos v à equação, criando a coluna d da tabela:
tab$d <- sapply(tab$v, FUN= function(x){9.8 - 0.196*x})
# Agora plotamos o gráfico:
ggplot(tab, aes(x=t,y=v)) +
geom_arrow(aes(xend=t+.5,yend=v+d))
e * 2
pi()
pi + 2
e +2
exp
exp()
k <- 50 + 20*exp(-.196 * c(0:20))
k
k <- 20 + exp(-.196 * c(0:20))
k
k <- 50 - 20*exp(-.196 * c(0:20))
k
k <- 50 - 40*exp(-.196 * c(0:20))
k
c(0:50)
#vamos criar a função v:
v <- function(t,v0){50 + (v0 - 50)*exp(-.196*t)}
#agora vamos criar o vetor t, de 0 a 50 segundos:
t <- c(0:50)
#agora, vamos criar um data-frame com várias velocidades iniciais em função do tempo:
vs <- data.frame(t = t,
v0 = v(t,0),
v10 = v(t,10),
v20 = v(t,20),
v30 = v(t,30),
v40 = v(t,40),
v50 = v(t,50))
#agora vamos colocar algumas dessas velocidades no gráfico:
ggplot(vs, aes(x=t)) +
geom_line(aes(y=v0), color="red") +
geom_line(aes(y=v20), color="green") +
geom_line(aes(y=v40), color="blue") +
geom_line(aes(y=v50), color="yellow")
View(vs)
#vamos criar a função v:
v <- function(t,v0){50 + (v0 - 50)*exp(-.196*t)}
#agora vamos criar o vetor t, de 0 a 50 segundos:
t <- c(0:50)
#agora, vamos criar um data-frame com várias velocidades iniciais em função do tempo:
vs <- data.frame(t = t,
v0 = v(t,0),
v10 = v(t,10),
v20 = v(t,20),
v30 = v(t,30),
v40 = v(t,40),
v50 = v(t,50))
#agora vamos colocar algumas dessas velocidades no gráfico:
ggplot(vs, aes(x=t)) +
geom_line(aes(y=v0), color="red") +
geom_line(aes(y=v20), color="green") +
geom_line(aes(y=v40), color="blue") +
geom_line(aes(y=v50), color="yellow") +
labs(title="Comportamento da queda conforme algumas velocidades iniciais",
y = "Vinicial")
ggplot(vs, aes(x=t)) +
geom_line(aes(y=v0), color="red") +
geom_line(aes(y=v10), color="brown") +
geom_line(aes(y=v20), color="green") +
geom_line(aes(y=v30), color="purple")
geom_line(aes(y=v40), color="blue") +
geom_line(aes(y=v50), color="yellow") +
labs(title="Comportamento da queda conforme algumas velocidades iniciais",
y = "Vinicial")
ggplot(vs, aes(x=t)) +
geom_line(aes(y=v0), color="red") +
geom_line(aes(y=v10), color="brown") +
geom_line(aes(y=v20), color="green") +
geom_line(aes(y=v30), color="purple") +
geom_line(aes(y=v40), color="blue") +
geom_line(aes(y=v50), color="yellow") +
labs(title="Comportamento da queda conforme algumas velocidades iniciais",
y = "Vinicial")
ggplot(vs, aes(x=t)) +
geom_line(aes(y=v0), color="red") +
geom_line(aes(y=v10), color="brown") +
geom_line(aes(y=v20), color="green") +
geom_line(aes(y=v30), color="purple") +
geom_line(aes(y=v40), color="blue") +
geom_line(aes(y=v50), color="yellow") +
labs(title="Comportamento de Vqueda conforme Vinicial",
y = "Vinicial")
#vamos criar a função v:
v <- function(t,v0){50 + (v0 - 50)*exp(-.196*t)}
#agora vamos criar o vetor t, de 0 a 50 segundos:
t <- c(0:10)
#agora, vamos criar um data-frame com várias velocidades iniciais em função do tempo:
vs <- data.frame(t = t,
v0 = v(t,0),
v10 = v(t,10),
v20 = v(t,20),
v30 = v(t,30),
v40 = v(t,40),
v50 = v(t,50))
#agora vamos colocar algumas dessas velocidades no gráfico:
ggplot(vs, aes(x=t)) +
geom_line(aes(y=v0), color="red") +
geom_line(aes(y=v10), color="brown") +
geom_line(aes(y=v20), color="green") +
geom_line(aes(y=v30), color="purple") +
geom_line(aes(y=v40), color="blue") +
geom_line(aes(y=v50), color="yellow") +
labs(title="Comportamento de Vqueda conforme Vinicial",
y = "Vinicial")
#vamos criar a função v:
v <- function(t,v0){50 + (v0 - 50)*exp(-.196*t)}
#agora vamos criar o vetor t, de 0 a 10 segundos:
t <- c(0:10)
#agora, vamos criar um data-frame com várias velocidades iniciais em função do tempo:
vs <- data.frame(t = t,
v0 = v(t,0),
v10 = v(t,10),
v25 = v(t,25),
v50 = v(t,50),
v75 = v(t,75),
v90 = v(t,90))
#agora vamos colocar algumas dessas velocidades no gráfico:
ggplot(vs, aes(x=t)) +
geom_line(aes(y=v0), color="red") +
geom_line(aes(y=v10), color="brown") +
geom_line(aes(y=v25), color="green") +
geom_line(aes(y=v50), color="purple") +
geom_line(aes(y=v75), color="blue") +
geom_line(aes(y=v90), color="yellow") +
labs(title="Comportamento de Vqueda conforme Vinicial",
y = "Vinicial")
#criar o vetor x:
x <- c(1:10)
#criar a função:
y <- function(x,c){-1/2*cos(x)*cos(2*x) - sin(x) + c * cos(x)}
#criar o data frame com x e alguns valores de c:
dat <- data.frame(x = x,
c5 = y(x,5),
c10 = y(x,10),
c15 = y(x,15),
c20 = y(x,20))
View(dat)
View(dat)
ggplot(dat,aes(x=x)) +
geom_line(aes(y=c5), color="red") +
geom_line(aes(y=c10), color="green") +
geom_line(aes(y=c15), color="blue") +
geom_line(aes(y=c20), color="brown")
#criar o vetor x:
x <- seq(1,10,by=.01)
#criar a função:
y <- function(x,c){-1/2*cos(x)*cos(2*x) - sin(x) + c * cos(x)}
#criar o data frame com x e alguns valores de c:
dat <- data.frame(x = x,
c5 = y(x,5),
c10 = y(x,10),
c15 = y(x,15),
c20 = y(x,20))
#plotar o gráfico:
ggplot(dat,aes(x=x)) +
geom_line(aes(y=c5), color="red") +
geom_line(aes(y=c10), color="green") +
geom_line(aes(y=c15), color="blue") +
geom_line(aes(y=c20), color="brown")
#criar o vetor x:
x <- seq(1,10,by=.01)
#criar a função:
y <- function(x,c){-1/2*cos(x)*cos(2*x) - sin(x) + c * cos(x)}
#criar o data frame com x e alguns valores de c:
dat <- data.frame(x = x,
c5 = y(x,5),
c10 = y(x,10),
c15 = y(x,15),
c20 = y(x,20))
#plotar o gráfico:
ggplot(dat,aes(x=x)) +
geom_line(aes(y=c5), color="red") +
geom_line(aes(y=c10), color="green") +
geom_line(aes(y=c15), color="blue") +
geom_line(aes(y=c20), color="brown") +
labs(title="y(x) variando valores de c", y = y)
#criar o vetor x:
x <- seq(1,10,by=.01)
#criar a função:
y <- function(x,c){-1/2*cos(x)*cos(2*x) - sin(x) + c * cos(x)}
#criar o data frame com x e alguns valores de c:
dat <- data.frame(x = x,
c5 = y(x,5),
c10 = y(x,10),
c15 = y(x,15),
c20 = y(x,20))
#plotar o gráfico:
ggplot(dat,aes(x=x)) +
geom_line(aes(y=c5), color="red") +
geom_line(aes(y=c10), color="green") +
geom_line(aes(y=c15), color="blue") +
geom_line(aes(y=c20), color="brown") +
labs(title="y(x) variando valores de c", y = "y")
seq(1:sqrt(exp(1)))
seq(1:sqrt(exp(1)),length.out=15)
seq(1,sqrt(exp(1)),length.out=15)
seq(1,sqrt(exp(1)),length.out=101)
seq(0,sqrt(exp(1)),length.out=101)
setwd("C:/Users/lazza/OneDrive/github/jpcyrino.github.io/alglin")
arrow(length = unit(.3,"cm"))
v <- data.frame(x = c(2,4,6),
y = c(6,4,2))
ggplot(v, aes(x = x, y = y)) +
geom_segment(arrow(length=unit(0.3,"cm")))
ggplot(v, aes(x = x, y = y)) +
geom_segment(aes(), arrow(length=unit(0.3,"cm")))
ggplot(v, aes(x = x, y = y)) +
geom_segment(aes(x=x,y=y), arrow(length=unit(0.3,"cm")))
v
v <- data.frame(x = c(2,4,6),
y = c(6,4,2))
ggplot(v, aes(x = x, y = y)) +
geom_line(arrow(length=unit(0.3,"cm")))
ggplot(v, aes(x = x, y = y)) +
geom_line(arrow=arrow(length=unit(0.3,"cm")))
ggplot(v, aes(x = x, y = y)) +
geom_segment(arrow=arrow(length=unit(0.3,"cm")))
ggplot(v, aes(x = x, y = y)) +
geom_segment(aes(x=x,y=y), arrow=arrow(length=unit(0.3,"cm")))
ggplot(v, aes(x = x, y = y)) +
geom_segment(aes(x=0,y=0,xend=x,yend=y), arrow=arrow(length=unit(0.3,"cm")))
ggplot(v, aes(x = x, y = y)) +
geom_segment(aes(x=0,y=0,xend=x,yend=y), arrow=arrow(length=unit(0.2,"cm")))
ggplot(v, aes(x = x, y = y)) +
geom_segment(aes(x=0,y=0,xend=x,yend=y), arrow=arrow(length=unit(0.2,"cm"))),
geom_text(aes(x=.5,y=3,label="u")) +
geom_text(aes(x=1.5,y=2,label="v")) +
geom_text(aes(x=3,y=1.5, label="w"))
ggplot(v, aes(x = x, y = y)) +
geom_segment(aes(x=0,y=0,xend=x,yend=y), arrow=arrow(length=unit(0.2,"cm"))) +
geom_text(aes(x=.5,y=3,label="u")) +
geom_text(aes(x=1.5,y=2,label="v")) +
geom_text(aes(x=3,y=1.5, label="w"))
ggplot(data.frame(x = 2, y = 4), aes(x=x, y=y)) +
geom_segment(aes(x=0, xend=x, y=0, yend=y), arrow=arrow(length=unit(.2,"cm"))) +
geom_segment(aes(x=2, xend=2+x, y=1, yend=1+y), arrow=arrow(length=unit(.2,"cm")))
v <- data.frame(x=c(2,4,6), y=c(2,2,4))
ggplot(v, aes(x=x,y=y)) +
geom_segment(aes(x=0,y=0, xend=x,yend=y), arrow=arrow(length=unit(.2,"cm"))) +
geom_text(aes(x=2.2,y=2,label="u")) +
geom_text(aes(x=4.2,y=2,label="v")) +
geom_text(aes(x=5.5,y=3.8, label="(u+v)"))
v <- data.frame(x=c(2,4,6), y=c(2,2,4))
ggplot(v, aes(x=x,y=y)) +
geom_segment(aes(x=0,y=0, xend=x,yend=y), arrow=arrow(length=unit(.2,"cm"))) +
geom_text(aes(x=2.2,y=2,label="u")) +
geom_text(aes(x=4.2,y=2,label="v")) +
geom_text(aes(x=5.5,y=3, label="(u+v)"))
v <- data.frame(x=c(2,4,6), y=c(2,2,4))
ggplot(v, aes(x=x,y=y)) +
geom_segment(aes(x=0,y=0, xend=x,yend=y), arrow=arrow(length=unit(.2,"cm"))) +
geom_text(aes(x=2.2,y=2,label="u")) +
geom_text(aes(x=4.2,y=2,label="v")) +
geom_text(aes(x=5.5,y=3.2, label="(u+v)"))
det(c(1,1,1,1,2,3,4,5,6))
det(matrix(c(1,1,1,1,2,3,4,5,6), nrow=3,ncol=3)
)
det(matrix(c(1,1,1,1,2,3,0,1,-1), nrow=3,ncol=3)
)
matrix(c(2,6,-2,0,4,-2,2,2,4))
matrix(c(2,6,-2,0,4,-2,2,2,4),byrow=3)
matrix(c(2,6,-2,0,4,-2,2,2,4),ncol=3)
matrix(c(2,6,-2,0,4,-2,2,2,4),nrow=3)
matrix(c(2,6,-2,0,4,-2,2,2,4),nrow=3,ncol=3)
matrix(c(2,0,2,6,4,2,-2,-2,-4),ncol=3)
m <- matrix(c(2,0,2,6,4,2,-2,-2,-4),ncol=3)
det(m)
t(m)
det(t(m))
det(m)
determinant(m)
det(m)
det(matrix(c(3,0,2,2,2,6,-1,-3,-7),3,3))
m
det(m)
m <- matrix(c(2,0,2,6,4,2,-2,2,-4),ncol=3)
det(m)
m <- matrix(c(2,0,2,6,4,2,2,-2,-4),ncol=3)
det(m)
m <- matrix(c(2,0,2,6,4,2,-2,-2,4),ncol=3)
det(m)
m <- matrix(c(2,0,-2,6,4,2,-2,-2,4),ncol=3)
det(m)
m <- matrix(c(2,0,2,6,4,-2,-2,-2,4),ncol=3)
det(m)
c(4,-3,-6) %*% c(3,-4,4)
m
solve(m)
M %.% solve(m)
M %*% solve(m)
m %*% solve(m)
A <- matrix(c(1,2,0,1,-1,6,1,2,3),3,3)
A
Z <- cbind(A[,1],A[,2],c(0,1,-12))
Z
A
det(A)
det(A)/det(Z)
det(Z)
det(Z)/det(A)
solve
solve(A,c(0,1,-12))
m <- matrix(c(2,1,1,1),2,2)
m
det(m)
det(2*m)
det(3*m)
m(c(2,2,2,1,1,1,4,4,4),3,3)
m <- matrix(c(2,2,2,1,1,1,4,4,4),3,3)
m
det(m)
m <- matrix(c(2,1,2,1,4,1,4,3,4),3,3)
m
det(m)
m <- matrix(c(2,1,2,2,4,6,4,3,4),3,3)
m
det(m)
det(2*m)
